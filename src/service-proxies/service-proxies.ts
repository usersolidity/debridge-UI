/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { ServiceProxyBase } from './service-proxy-base';
import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, from as _observableFrom, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';


export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class SentEventServiceProxy extends ServiceProxyBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5551";
    }

    getMy(receiver: string | null | undefined, chainIdTo: number | undefined): Observable<SentEventDTO[]> {
        let url_ = this.baseUrl + "/api/SentEvent/getMy?";
        if (receiver !== undefined && receiver !== null)
            url_ += "receiver=" + encodeURIComponent("" + receiver) + "&";
        if (chainIdTo === null)
            throw new Error("The parameter 'chainIdTo' cannot be null.");
        else if (chainIdTo !== undefined)
            url_ += "chainIdTo=" + encodeURIComponent("" + chainIdTo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMy(<any>response_);
                } catch (e) {
                    return <Observable<SentEventDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SentEventDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMy(response: HttpResponseBase): Observable<SentEventDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SentEventDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SentEventDTO[]>(<any>null);
    }

    getAllMyTransfers(receiver: string | null | undefined, chainIdTo: number | undefined): Observable<SentEventDTO[]> {
        let url_ = this.baseUrl + "/api/SentEvent/GetAllMyTransfers?";
        if (receiver !== undefined && receiver !== null)
            url_ += "receiver=" + encodeURIComponent("" + receiver) + "&";
        if (chainIdTo === null)
            throw new Error("The parameter 'chainIdTo' cannot be null.");
        else if (chainIdTo !== undefined)
            url_ += "chainIdTo=" + encodeURIComponent("" + chainIdTo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAllMyTransfers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMyTransfers(<any>response_);
                } catch (e) {
                    return <Observable<SentEventDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SentEventDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMyTransfers(response: HttpResponseBase): Observable<SentEventDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SentEventDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SentEventDTO[]>(<any>null);
    }
}

@Injectable()
export class PairsServiceProxy extends ServiceProxyBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5551";
    }

    getAll(): Observable<PairEventDTO[]> {
        let url_ = this.baseUrl + "/api/Pairs/getAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PairEventDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PairEventDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PairEventDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PairEventDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PairEventDTO[]>(<any>null);
    }

    getForChain(chainId: number | undefined): Observable<PairEventDTO[]> {
        let url_ = this.baseUrl + "/api/Pairs/GetForChain?";
        if (chainId === null)
            throw new Error("The parameter 'chainId' cannot be null.");
        else if (chainId !== undefined)
            url_ += "chainId=" + encodeURIComponent("" + chainId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetForChain(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForChain(<any>response_);
                } catch (e) {
                    return <Observable<PairEventDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PairEventDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetForChain(response: HttpResponseBase): Observable<PairEventDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PairEventDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PairEventDTO[]>(<any>null);
    }
}

@Injectable()
export class BurntEventServiceProxy extends ServiceProxyBase {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super();
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5551";
    }

    getMy(receiver: string | null | undefined, chainIdTo: number | undefined): Observable<BurntEventDTO[]> {
        let url_ = this.baseUrl + "/api/BurntEvent/getMy?";
        if (receiver !== undefined && receiver !== null)
            url_ += "receiver=" + encodeURIComponent("" + receiver) + "&";
        if (chainIdTo === null)
            throw new Error("The parameter 'chainIdTo' cannot be null.");
        else if (chainIdTo !== undefined)
            url_ += "chainIdTo=" + encodeURIComponent("" + chainIdTo) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return _observableFrom(this.transformOptions(options_)).pipe(_observableMergeMap(transformedOptions_ => {
            return this.http.request("get", url_, transformedOptions_);
        })).pipe(_observableMergeMap((response_: any) => {
            return this.processGetMy(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMy(<any>response_);
                } catch (e) {
                    return <Observable<BurntEventDTO[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<BurntEventDTO[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetMy(response: HttpResponseBase): Observable<BurntEventDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BurntEventDTO.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BurntEventDTO[]>(<any>null);
    }
}

export class SentEventDTO implements ISentEventDTO {
    transactionHash!: string | undefined;
    chainId!: number;
    blockNumber!: number;
    submissionId!: string | undefined;
    debridgeId!: string | undefined;
    amount!: string | undefined;
    receiver!: string | undefined;
    nonce!: number;
    chainIdTo!: number;
    tokenAddress!: string | undefined;
    tokenDecimals!: number;
    tokenName!: string | undefined;
    tokenSymbol!: string | undefined;
    submissionApproved!: boolean;
    isConfirmed!: boolean;
    isExecuted!: boolean;
    isBurntEvent!: boolean;

    constructor(data?: ISentEventDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionHash = _data["transactionHash"];
            this.chainId = _data["chainId"];
            this.blockNumber = _data["blockNumber"];
            this.submissionId = _data["submissionId"];
            this.debridgeId = _data["debridgeId"];
            this.amount = _data["amount"];
            this.receiver = _data["receiver"];
            this.nonce = _data["nonce"];
            this.chainIdTo = _data["chainIdTo"];
            this.tokenAddress = _data["tokenAddress"];
            this.tokenDecimals = _data["tokenDecimals"];
            this.tokenName = _data["tokenName"];
            this.tokenSymbol = _data["tokenSymbol"];
            this.submissionApproved = _data["submissionApproved"];
            this.isConfirmed = _data["isConfirmed"];
            this.isExecuted = _data["isExecuted"];
            this.isBurntEvent = _data["isBurntEvent"];
        }
    }

    static fromJS(data: any): SentEventDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SentEventDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionHash"] = this.transactionHash;
        data["chainId"] = this.chainId;
        data["blockNumber"] = this.blockNumber;
        data["submissionId"] = this.submissionId;
        data["debridgeId"] = this.debridgeId;
        data["amount"] = this.amount;
        data["receiver"] = this.receiver;
        data["nonce"] = this.nonce;
        data["chainIdTo"] = this.chainIdTo;
        data["tokenAddress"] = this.tokenAddress;
        data["tokenDecimals"] = this.tokenDecimals;
        data["tokenName"] = this.tokenName;
        data["tokenSymbol"] = this.tokenSymbol;
        data["submissionApproved"] = this.submissionApproved;
        data["isConfirmed"] = this.isConfirmed;
        data["isExecuted"] = this.isExecuted;
        data["isBurntEvent"] = this.isBurntEvent;
        return data; 
    }
}

export interface ISentEventDTO {
    transactionHash: string | undefined;
    chainId: number;
    blockNumber: number;
    submissionId: string | undefined;
    debridgeId: string | undefined;
    amount: string | undefined;
    receiver: string | undefined;
    nonce: number;
    chainIdTo: number;
    tokenAddress: string | undefined;
    tokenDecimals: number;
    tokenName: string | undefined;
    tokenSymbol: string | undefined;
    submissionApproved: boolean;
    isConfirmed: boolean;
    isExecuted: boolean;
    isBurntEvent: boolean;
}

export class PairEventDTO implements IPairEventDTO {
    debridgeId!: string | undefined;
    transactionHash!: string | undefined;
    chainId!: number;
    blockNumber!: number;
    eventChainId!: number;
    tokenAddress!: string | undefined;
    tokenDecimals!: number;
    tokenName!: string | undefined;
    tokenSymbol!: string | undefined;
    minAmount!: string | undefined;
    transferFee!: string | undefined;
    minReserves!: string | undefined;

    constructor(data?: IPairEventDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.debridgeId = _data["debridgeId"];
            this.transactionHash = _data["transactionHash"];
            this.chainId = _data["chainId"];
            this.blockNumber = _data["blockNumber"];
            this.eventChainId = _data["eventChainId"];
            this.tokenAddress = _data["tokenAddress"];
            this.tokenDecimals = _data["tokenDecimals"];
            this.tokenName = _data["tokenName"];
            this.tokenSymbol = _data["tokenSymbol"];
            this.minAmount = _data["minAmount"];
            this.transferFee = _data["transferFee"];
            this.minReserves = _data["minReserves"];
        }
    }

    static fromJS(data: any): PairEventDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PairEventDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["debridgeId"] = this.debridgeId;
        data["transactionHash"] = this.transactionHash;
        data["chainId"] = this.chainId;
        data["blockNumber"] = this.blockNumber;
        data["eventChainId"] = this.eventChainId;
        data["tokenAddress"] = this.tokenAddress;
        data["tokenDecimals"] = this.tokenDecimals;
        data["tokenName"] = this.tokenName;
        data["tokenSymbol"] = this.tokenSymbol;
        data["minAmount"] = this.minAmount;
        data["transferFee"] = this.transferFee;
        data["minReserves"] = this.minReserves;
        return data; 
    }
}

export interface IPairEventDTO {
    debridgeId: string | undefined;
    transactionHash: string | undefined;
    chainId: number;
    blockNumber: number;
    eventChainId: number;
    tokenAddress: string | undefined;
    tokenDecimals: number;
    tokenName: string | undefined;
    tokenSymbol: string | undefined;
    minAmount: string | undefined;
    transferFee: string | undefined;
    minReserves: string | undefined;
}

export class BurntEventDTO implements IBurntEventDTO {
    transactionHash!: string | undefined;
    chainId!: number;
    blockNumber!: number;
    submissionId!: string | undefined;
    debridgeId!: string | undefined;
    amount!: string | undefined;
    receiver!: string | undefined;
    nonce!: number;
    chainIdTo!: number;
    tokenAddress!: string | undefined;
    tokenDecimals!: number;
    tokenName!: string | undefined;
    tokenSymbol!: string | undefined;
    submissionApproved!: boolean;
    isExecuted!: boolean;
    isConfirmed!: boolean;

    constructor(data?: IBurntEventDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.transactionHash = _data["transactionHash"];
            this.chainId = _data["chainId"];
            this.blockNumber = _data["blockNumber"];
            this.submissionId = _data["submissionId"];
            this.debridgeId = _data["debridgeId"];
            this.amount = _data["amount"];
            this.receiver = _data["receiver"];
            this.nonce = _data["nonce"];
            this.chainIdTo = _data["chainIdTo"];
            this.tokenAddress = _data["tokenAddress"];
            this.tokenDecimals = _data["tokenDecimals"];
            this.tokenName = _data["tokenName"];
            this.tokenSymbol = _data["tokenSymbol"];
            this.submissionApproved = _data["submissionApproved"];
            this.isExecuted = _data["isExecuted"];
            this.isConfirmed = _data["isConfirmed"];
        }
    }

    static fromJS(data: any): BurntEventDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BurntEventDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transactionHash"] = this.transactionHash;
        data["chainId"] = this.chainId;
        data["blockNumber"] = this.blockNumber;
        data["submissionId"] = this.submissionId;
        data["debridgeId"] = this.debridgeId;
        data["amount"] = this.amount;
        data["receiver"] = this.receiver;
        data["nonce"] = this.nonce;
        data["chainIdTo"] = this.chainIdTo;
        data["tokenAddress"] = this.tokenAddress;
        data["tokenDecimals"] = this.tokenDecimals;
        data["tokenName"] = this.tokenName;
        data["tokenSymbol"] = this.tokenSymbol;
        data["submissionApproved"] = this.submissionApproved;
        data["isExecuted"] = this.isExecuted;
        data["isConfirmed"] = this.isConfirmed;
        return data; 
    }
}

export interface IBurntEventDTO {
    transactionHash: string | undefined;
    chainId: number;
    blockNumber: number;
    submissionId: string | undefined;
    debridgeId: string | undefined;
    amount: string | undefined;
    receiver: string | undefined;
    nonce: number;
    chainIdTo: number;
    tokenAddress: string | undefined;
    tokenDecimals: number;
    tokenName: string | undefined;
    tokenSymbol: string | undefined;
    submissionApproved: boolean;
    isExecuted: boolean;
    isConfirmed: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}

////
